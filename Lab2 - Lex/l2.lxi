DIGIT    [0-9]  
%%

VAR return 1;
START return 2;
END return 3;
INTEGER return 4;
GET return 5;
WHILE return 6;
DO return 7;
WRITE return 8;

":" return 10;
";" return 11;
"<-" return 12;
"mod" return 13;
"div" return 14;
"+" return 15;
"(" return 16;
")" return 17;

[a-zA-Z][a-zA-Z0-9]* return 100;
[1-9][0-9]* return 101;
[0-9] return 101;
[ \t\n]+ ;

%%
typedef struct{
    int key;
    int value;
}pif; 

typedef struct{
    int key;
    char value[30];
}st;

int pifLength=0;
int stLength=0;

pif PIF[100];
st ST[100];

void addToSt(char value[]){
    if(findinST(value)==-1){
    ST[stLength].key=stLength;
    strcpy(ST[stLength].value,value);
    stLength++;}
}

int findinST(char value[]){
    for(int i=0;i<stLength;i++)
        {if(strcmp(ST[i].value,value)==0) return ST[i].key;}
    return -1;
}

void addIdentifierToPif(char value[])
{
    PIF[pifLength].key=100;
    PIF[pifLength].value=findinST(value);
    pifLength++;
}

void addConstantToPif(char value[])
{
    PIF[pifLength].key=101;
    PIF[pifLength].value=findinST(value);
    pifLength++;
}

void addElementToPif(int key)
{
    PIF[pifLength].key=key;
    PIF[pifLength].value=-1;
    pifLength++;
}

void printAll()
{
    
    printf("PIF:\n");
    for(int i=0;i<pifLength;i++)
        printf("Element with code %d has value in St: %d \n " , PIF[i].key, PIF[i].value);
    
    printf("\nSymbol table:\n");
    for(int i=0;i<stLength;i++)
        printf("Element %s has position in St: %d \n " , ST[i].value, ST[i].key);
}

main( argc, argv )
int argc;
char **argv;
    {
         ++argv, --argc;	/* skip over program name */
        if ( argc > 0 )
            yyin = fopen( argv[0], "r" );
        else
            yyin = stdin;
    int ntoken,vtoken;
    ntoken=yylex();
    while(ntoken){  if(ntoken==100) {addToSt(yytext); addIdentifierToPif(yytext);}
                    else if(ntoken==101) {addToSt(yytext); addConstantToPif(yytext);}
                    else addElementToPif(ntoken);
    			    ntoken=yylex();}
    printAll();
    return 0;
    }

#ifndef yywrap
   yywrap() { return 1; }
   #endif